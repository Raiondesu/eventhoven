{"version":3,"file":"minimal.js","sources":["../src/events.ts","../src/util.ts"],"sourcesContent":["import { mapObject } from './util';\nimport { TEventMap, TEventSignatures } from './types';\n\n/**\n * Creates an event collection based on handler templates\n *\n * @param events - an object with default handlers for events\n */\nexport const eventMap = <Events extends TEventSignatures>(\n  events: Events\n) => <TEventMap<Events>> mapObject(\n  events,\n  // Actually faster than `new Map([[events[event], () => {}]])`\n  // see https://jsperf.com/map-constructor-vs-set/2\n  // This might be due to the initialization of iterators in the constructor (https://tc39.es/ecma262/#sec-map-iterable),\n  // whereas no iterators are used in the `set` method (https://tc39.es/ecma262/#sec-map.prototype.set).\n  event => new Map().set(events[event], () => {\n    /* make it impossible to unsubscribe from within the default handler */\n  })\n);\n","import { TEventMap } from './types';\n\n/**\n * Maps object values by their keys into a new object\n *\n * Generaly equivalent to `Array.prototype.map()`\n */\nexport const mapObject = <T extends object, R>(\n  obj: T,\n  value: (key: keyof T) => R\n) => (\n  <Array<keyof T>>\n  [...Object.keys(obj), ...Object.getOwnPropertySymbols(obj)]\n).reduce((newObj, key) => (\n  newObj[key] = value(key), newObj\n), <Record<keyof T, R>> {});\n\nexport type TDoAction<P extends any[] = any[], R = void> = <M extends TEventMap>(\n  eventMap: M\n) => <E extends keyof M>(\n  event: E\n) => (...args: P) => R;\n"],"names":["events","obj","value","Object","keys","getOwnPropertySymbols","reduce","newObj","key","mapObject","event","Map","set"],"mappings":"kNAQwB,CACtBA,GCFuB,EACvBC,EACAC,IAGA,IAAIC,OAAOC,KAAKH,MAASE,OAAOE,sBAAsBJ,IACtDK,OAAO,CAACC,EAAQC,KAChBD,EAAOC,GAAON,EAAMM,GAAMD,GACJ,IDLCE,CACvBT,EAKAU,IAAS,IAAIC,KAAMC,IAAIZ,EAAOU,GAAQ"}